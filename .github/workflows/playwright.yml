name: Playwright Tests

run-name: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || '' }}

on:
  workflow_dispatch:
    inputs:
      rancher:
        description: Rancher version
        type: choice
        default: 'released'
        options:
        - released
        - 'v2.9'
        - 'v2.10'
        - 'v2.11'
        - 'v2.12'
        - 'v2.9-0 (devel)'
        - 'v2.10-0 (devel)'
        - 'v2.11-0 (devel)'
        - 'v2.12-0 (devel)'
      rancher_text:
        description: Rancher constraint
        required: false
      kubewarden:
        description: Kubewarden UI from
        type: choice
        default: 'github'
        options:
        - source # build extension from main branch
        - github # https://rancher.github.io/kubewarden-ui/
        - prime  # ui-plugin-charts in released rancher prime
      k3s:
        description: Kubernetes version
        type: choice
        default: 'auto'
        options:
        - auto
        - v1.27
        - v1.28
        - v1.29
        - v1.30
        - v1.31
        - v1.32
        - v1.33
      mode:
        description: Kubewarden install mode
        type: choice
        default: 'manual'
        options:
        - manual
        - fleet
        - upgrade
      testbase:
        description: Run standard e2e tests
        type: boolean
        default: true
      testpolicies:
        description: Run extra policy tests
        type: boolean
        default: false

  pull_request:
    branches:
      - main
      - release-1.6 # rancher 2.8
      - release-2.1 # rancher 2.9
      - release-3.1 # rancher 2.10
    paths:
      - pkg/kubewarden/**
      - package.json

  workflow_run:
    workflows: ["Build and Release Extension Charts"]
    types:
      - completed

  schedule:
    - cron: "1 21 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.workflow_run.head_branch || github.ref }}
  cancel-in-progress: true

env:
  # Github -> Secrets and variables -> Actions -> New repository variable
  K3D_VERSION: # 'v5.6.3' - optionally pin version
  K3S_VERSION: ${{ inputs.k3s != 'auto' && inputs.k3s || '' }}
  K3D_CLUSTER_NAME: ${{ github.repository_owner }}-${{ github.event.repository.name }}-runner
  # First value after the && must be truthy. Otherwise, the value after the || will always be returned
  TESTBASE: ${{ github.event_name != 'workflow_dispatch' && true || inputs.testbase }}
  TESTPOLICIES: ${{ inputs.testpolicies || false }}
  # Enable QASE integration only for original repo
  QASE: ${{ github.repository_owner == 'rancher' && github.event_name != 'pull_request' }}

defaults:
  run:
    shell: bash

jobs:
  e2e:
    strategy:
      fail-fast: false
      matrix:
        # Rancher versions for PRs is based on the branch
        rancher:  ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_run') && fromJSON('["p2.8", "p2.9", "p2.10", "p2.11"]') || fromJSON(format('["{0}"]', inputs.rancher_text || inputs.rancher )) }}
        mode: ${{ (github.event_name == 'schedule' || github.event_name == 'workflow_run') && fromJSON('["manual", "upgrade", "fleet"]') || fromJSON(format('["{0}"]', inputs.mode || 'manual')) }}
        exclude:
          # Run all modes on latest prime version (2.11)
          - rancher: ${{ github.event_name == 'schedule' && 'p2.8' }}
            mode: upgrade
          - rancher: ${{ github.event_name == 'schedule' && 'p2.8' }}
            mode: fleet
          - rancher: ${{ github.event_name == 'schedule' && 'p2.9' }}
            mode: upgrade
          - rancher: ${{ github.event_name == 'schedule' && 'p2.9' }}
            mode: fleet
          - rancher: ${{ github.event_name == 'schedule' && 'p2.10' }}
            mode: upgrade
          - rancher: ${{ github.event_name == 'schedule' && 'p2.10' }}
            mode: fleet
          # Exclude unrelated Rancher versions from release jobs # head_branch = tag (kubewarden-2.1.0-rc.1)
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-1.') && 'p2.9' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-1.') && 'p2.10' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-1.') && 'p2.11' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-2.') && 'p2.8' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-2.') && 'p2.10' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-2.') && 'p2.11' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-3.') && 'p2.8' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-3.') && 'p2.9' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-3.') && 'p2.11' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-4.') && 'p2.8' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-4.') && 'p2.9' }}
          - rancher: ${{ startsWith(github.event.workflow_run.head_branch, 'kubewarden-4.') && 'p2.10' }}


    # Run schedule workflows only on original repo, not forks
    if: |
      (github.event_name != 'schedule' || github.repository_owner == 'rancher') &&
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success')
    runs-on: self-hosted
    steps:
    # ==================================================================================================

    # Checkout tests specific to used Rancher version
    - name: Find branch with tests
      if: ${{ github.event_name != 'pull_request' }}
      id: find-branch
      run: |
        rancher=$(sed 's/^[^0-9]*//' <<< "${{ matrix.rancher }}")
        case "$rancher" in
          2.8*)  ref='release-1.6';;
          2.9*)  ref='release-2.1';;
          2.10*) ref='release-3.1';;
          *)     ref='';;
        esac
        echo "ref=$ref" | tee -a $GITHUB_OUTPUT

    # Install Rancher specific to PR target branch
    - name: Find Rancher from PR
      if: ${{ github.event_name == 'pull_request' }}
      id: find-rancher
      run: |
        case "${{ github.event.pull_request.base.ref }}" in
          release-1.6) rancher="p2.8";;
          release-2.1) rancher="p2.9";;
          release-3.1) rancher="p2.10";;
          main)        rancher="prime";;
        esac
        echo "rancher=$rancher" | tee -a $GITHUB_OUTPUT

    # ==================================================================================================
    # Set up parameters and ENV

    # Override env based on github action trigger
    - name: Setup global ENV
      run: |
        RANCHER="${{ matrix.rancher }}"

        case ${{github.event_name}} in
          workflow_dispatch)
            KUBEWARDEN=${{ inputs.kubewarden }}
            # Translate input to semver constraint
            RANCHER=${RANCHER/released/*}
            RANCHER=${RANCHER%(devel)}
            ;;
          pull_request)
            KUBEWARDEN=source
            RANCHER="${{ steps.find-rancher.outputs.rancher }}"
            ;;
          schedule)
            [[ "$RANCHER" == c* ]] && KUBEWARDEN=github || KUBEWARDEN=prime;;
          workflow_run)
            KUBEWARDEN=github;;
        esac

        # Print matrix
        echo "Event: ${{github.event_name}}"
        echo "Mode: ${{matrix.mode}}"
        echo RANCHER="$RANCHER" | tee -a $GITHUB_ENV
        echo KUBEWARDEN="$KUBEWARDEN" | tee -a $GITHUB_ENV
        echo TESTBASE=$TESTBASE
        echo TESTPOLICIES="$TESTPOLICIES" | tee -a $GITHUB_ENV

    # ==================================================================================================
    # Create k3d cluster and install rancher
    # Use local kuberlr to avoid version skew

    - uses: actions/checkout@v4
      with:
        ref: ${{ steps.find-branch.outputs.ref }}

    - name: Install k3d
      run: TAG=${{ env.K3D_VERSION }} sudo --preserve-env=TAG k3d-install

    - name: Checkout kubewarden-end-to-end-tests
      uses: actions/checkout@v4
      with:
        repository: kubewarden/kubewarden-end-to-end-tests
        ref: main
        path: action-make

    - name: Install Rancher
      working-directory: action-make
      run: make rancher
      env:
        RANCHER: ${{ env.RANCHER }}
        K3S: ${{ env.K3S_VERSION }}
        WORKER_COUNT: 1
        CLUSTER_NAME: ${{ env.K3D_CLUSTER_NAME }}
        K3D_REGISTRY_CONFIG: ${{secrets.K3D_REGISTRY_CONFIG}}

    # ==================================================================================================
    # Setup playwright ENV and run tests
    # https://rancher.github.io/dashboard/testing/e2e-test#setup-for-local-tests

    - uses: actions/setup-node@v4
      if: env.KUBEWARDEN == 'source'
      with:
        node-version: ${{ (github.event.pull_request.base.ref == 'release-1.6' || github.event.pull_request.base.ref == 'release-2.1') && '16' || '20' }}

    - name: Build Kubewarden extension
      if: env.KUBEWARDEN == 'source'
      run: |
        yarn install --ignore-engines
        git diff --exit-code yarn.lock
        VERSION=0.0.1 yarn build-pkg kubewarden

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install playwright
      working-directory: tests
      run: |
        yarn install
        yarn playwright install chromium  # --with-deps not supported on opensuse

    - name: Execute tests
      timeout-minutes: 120
      working-directory: tests
      run: |
        # Policy tests are hitting artifacthub rate limits
        # Filter to exclude policies except those starting with random letter
        EXCLUDE=$(yarn playwright test "\/90-" --reporter=list --list | grep -o 'install: .' | cut -d' ' -f2 | sort -fRu | sed 1d | paste -sd '')
        EXCLUDE="90-.*install: [$EXCLUDE]"

        TFILTER="\/00"                                        # Always run installation tests
        [[ "$TESTBASE" == "true" ]] && TFILTER+=" \/[1-9]"    # Schedule everything else as base test
        [[ "$TESTPOLICIES" != "true" ]] && GFILTER="$EXCLUDE" # Limit number of tested policies

        # List tests and execute
        echo yarn playwright test ${TFILTER:-} ${GFILTER:+-gv "$GFILTER"} -x
        yarn playwright test ${TFILTER:-} ${GFILTER:+-gv "$GFILTER"} -x | tee qase-report.log
      env:
        MODE: ${{ matrix.mode }}
        # Override OTEL operator version by github variable
        OTEL_OPERATOR: ${{ vars.OTEL_OPERATOR }}
        # Check that installed extension version matches release tag
        UIVERSION: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || '' }}
        ORIGIN: ${{ env.KUBEWARDEN }}
        QASE_MODE: ${{ env.QASE == 'true' && 'testops' || 'off' }}
        QASE_TESTOPS_API_TOKEN: ${{ secrets.QASE_APITOKEN }}
        QASE_TESTOPS_RUN_TITLE: "Run[${{github.event_name}}]: UI[${{ env.KUBEWARDEN }}] - MODE[${{ matrix.mode }}] - RANCHER[${{ matrix.rancher }}] "
        QASE_TESTOPS_RUN_DESCRIPTION: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    # ==================================================================================================
    # QASE Integration

    # Delete previous run if we have new one
    - name: Delete previous QASE run
      if: ${{ env.QASE == 'true' && !cancelled() && github.run_attempt > 1 }}
      run: |
        gh run download ${{ github.run_id }} -n QASE_RUN_ID-${{ matrix.rancher }}-${{ matrix.mode }} ||:
        if [ -f QASE_RUN_ID.txt ]; then
          qid=$(< QASE_RUN_ID.txt)
          curl --request DELETE --url https://api.qase.io/v1/run/KUBEWARDEN/$qid --header 'Token: ${{secrets.QASE_APITOKEN_MKRAVEC}}' --header 'accept: application/json'
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    # Delete current run if it was canceled
    - name: Find current QASE run
      if: ${{ env.QASE == 'true' && always() && hashFiles('tests/qase-report.log') != '' }}
      run: |
        grep -Eom1 'qase:.* [Rr]un.* [0-9]+' tests/qase-report.log | awk '{print $NF}' | tee QASE_RUN_ID.txt

    - name: Delete current QASE run if job was canceled
      if: ${{ env.QASE == 'true' && cancelled() && hashFiles('tests/qase-report.log') != '' }}
      run: |
        qid=$(< QASE_RUN_ID.txt)
        curl --request DELETE --url https://api.qase.io/v1/run/KUBEWARDEN/$qid --header 'Token: ${{secrets.QASE_APITOKEN_MKRAVEC}}' --header 'accept: application/json'

    # Set current run ID
    - name: Upload current QASE_RUN_ID
      if: ${{ env.QASE == 'true' && !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: QASE_RUN_ID-${{ matrix.rancher }}-${{ matrix.mode }}
        path: QASE_RUN_ID.txt
        overwrite: true
        if-no-files-found: ignore

    # ==================================================================================================
    # Artifacts & Summary
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.rancher }}-${{ matrix.mode }}
        path: tests/playwright-report/
        retention-days: 15

    - name: Clean Up
      if: always()
      run: |
        k3d cluster delete ${{ env.K3D_CLUSTER_NAME }}
